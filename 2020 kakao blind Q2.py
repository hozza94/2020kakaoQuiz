### 2020.07.09 22:47 시작
### 2020.07.11 17:41 프로그래머스 채점 100!
### 괄호변환 프로그램
### 문자열 슬라이싱, 리스트 활용 필요예상
### 입력받는 문자열 w 에 대해서 '(' , ')' 로만 이루어져 있음


##### 기본 용어 정의
# '(' 와 ')'의 갯수가 같다면 -> 균형잡힌 괄호 문자열
# '(' 와 ')'의 짝도 모두 맞을경우 -> 올바른 괄호 문자열
# '(' 와 ')' 로만 이루어진 문자열 w가 균형잡힌 괄호 문자열 이라면
# 다음과 같은 과정을 통해 올바른 괄호 문자열로 변환할 수 있습니다.

# 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
# 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다.
# 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
# 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
#  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
#4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
#  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
#  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
#  4-3. ')'를 다시 붙입니다. 
#  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
#  4-5. 생성된 문자열을 반환합니다.

# 균형잡힌 괄호문자열 p 가 매개변수로 주어질때 알고리즘을 수행해 올바른 괄호 문자열로 변환한 결과를 return
#####

##### 요구사항
#매개변수 설명 p는 균형잡힌 괄호문자열이다..!!
#p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
#문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
#만약 p가 이미 올바른 괄호 문자열이라면 그대로 return 하면 됩니다.
#####

##### 사용예정인 변수
# 균형잡힌 괄호 문자열인지 판단하기위한 변수 - (int) correct // "(" = +1 , ")" = -1 함
# 올바른 괄호 문자열이라면, corr값이 중간에 음수가 되지 않음. 마지막 괄호가 항상 ")"이기 때문
# 아직 u 문자열에 문자를 넣고있는것을 확인하기 위한 변수 - (bool) uing
##### 


def solution(p):
    answer = ''
    u = ""
    v = ""
    corr = 0
    uing = True
    
    # 빈문자열인 경우 빈 문자열 return
    if p == "":
        return answer
    # 이미 올바른 문자열인 경우 바로 return
    else:
        if check_corr(p):
            return p
        
    for s in p:
        if s == "(" :
            corr += 1
        else :
            corr -= 1

        if uing :
            u += s
        else :
            v += s
                
        if corr == 0:
            uing = False
    # for loop end

    # 4번 조건 문항
    if check_corr(u):
        answer = u + solution(v)
    else:
        answer = "(" + solution(v) + ")" + reverse(u)
            
    return answer

# 괄호 문자열 w에 대해서 올바른 괄호 문자열인지 체크
#  균형잡힌  문자열이라면 모든 괄호를 체크한 후에 결과값이 0
def check_corr(w):
    corr = 0

    for n in w:
        if n == "(" :
            corr += 1
        else :
            corr -= 1
        if corr < 0 :
            return False
    # for loop end
    return True
            
# 4-4 첫번째, 마지막 문자를 제거, 나머지 문자열 괄호방향 뒤집기
def reverse(u):
    reverse = ""
    for ch in range(len(u)):
        if (ch == 0 or ch == (len(u)-1)) :
            continue
        elif u[ch] == "(" :
            reverse += ")"
        else:
            reverse += "("
    # for loop end
    return reverse

w = input("괄호 문자열 입력(균형잡힌 괄호문자열로 입력!): ")
print(solution(w))
